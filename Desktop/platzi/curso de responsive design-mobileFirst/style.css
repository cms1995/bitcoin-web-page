/* cuando uno agrega los estilos, por buenas prácticas, conviene acomodarlos con relación a ciertos temas: 
1° primero ubicamos los estilos que tengan relación al posicionamiento: fixed, relative, static, absolute
2° despues colocamos lo que tiene q ver con el modelo de caja (Box model) margin, paddin, width, height, content
3° lo q tiene que ver con Tipografía: fuentes, su tamaño, etc
4° Temas visuales: shadow-box, border-radius, gradient
5° miscelanious u otros: reglas de CSS y demás. */

/* variables de colores */ 
:root{
    --bitcoin--orange: #F7931A;
    --soft--orange: #ffe9d5;
    --secondary-blue: #1A9AF7;
    --soft-blue: #e7f5ff;
    --warm-black: #201E1C;
    --black: #282623;
    --grey: #bababa;
    --off-white: #FAF8F7;
    --white: #fff;
    --just-white: #fff;

}

/* con esto ya tenemos seteado el margin, padding y border-box, que trabajaremos en todos nuestros contenedores */
*{
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

html{
    font-size: 62.5%;
    font-family: 'DM Sans', 'sans-serif';
}

header{
    position:relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
    width: 100%;
    min-width: 320px; /* dimension más chica en los celulares */
    height: 334px;
    text-align: center;
    background: linear-gradient(207.8deg, #201E1C 16.69%, #F7931A 100%);/* con esto vamos a poder usar colores con gradientes, algo q no habíamos visto hasta ahora en css. una herramienta buena para ello es también https://cssgradient.io/. Nuestros caso está separado x 2 colores y cuales son los grados en los q se va a dividir y el porcentaje que va a ocupar cada uno */

}

header img{
    width: 150px;
    height: 24px;
    margin-top: 60px;
    align-self: center; /* con esto vamos a centrar la img. Recorda q como estamos usando flex esta es la forma de poder centrar a un elemento que tenga un contenedor con display flex*/
}

.header-title-container{
    width: 90%;
    min-width: 280px;
    max-width: 900px; /* esto quiere decir q va a estar utilizando siempre un width del 90% de la pantalla, entre 280 y 900px */
    height: 210px;
    margin-top: 40px; /* para q logre separarse del logotipo */
    text-align: center;
    align-self: center; /* esto es para q todo el texto se centre y entonces el 10% que quedó de width restante, sea igual para ambos lados(o sea un 5% a la derecha y un 5% a la izquierda) */
}


/* vamos a ser lo más específicos que podamos para no tener conflictos futuros */
.header-title-container h1{
   font-size: 2.4rem; 
   font-weight: bold;
   line-height: 2.6rem;/*  espacio entre una linea y otra en el texto del h1 */
   color: var(--just-white);
}

.header-title-container p{
    margin-top: 25px;
    font-size: 1.4rem;
    font-weight: 500;
    line-height: 1.8rem;
    color: var(--soft--orange);
}


/* uso de position para boton flotante */
.header-title-container .header--button{
    position: absolute; /* recordemos q cuando estamos en position absolute puedo usar top, bottom, left y right para poder mover en esa posición o posiciones, mi contenedor o mi elemento. Si estoy en algún otro position no se va a poder, principalmente con position relative */
    left: calc(50% - 118px); /* esta es una forma de centrar el boton. La función calc lo q hace es un calculo. Queremos q se vaya al centro con el 50% pero como nuestro botón es muy grande y está ocupando más, evidentemente si se pone al dcentro lo empuja por fuera de la pantalla xq el botón es muy grande, entonces le decimos q lo corra 118px ala derecha para que quede centrado  */
    top: 270px;
    display: block;
    margin-top: 35px;
    padding: 15px;
    width: 229px;
    height: 48px;
    background-color: var(--off-white);
    box-shadow: 0px 4px 8px rgba(89, 73, 0. 16);/*  esto es para ponerle sombra al boton */
    border: none;
    border-radius: 5px;
    font-size: 1.4rem;
    font-weight: bold;
    text-decoration: none;
    color: var(--black);
}

.header-title-container .header--button span{
    display: inline-block;
    width: 13px;
    height: 8px;
    margin-left: 10px;
    background-image: url('./assets/iconos/down-arrow.svg');
}

main{
    width: 100%;
    height: auto; /* el mismo contenido va a ir definiendo la altura del main, x lo tanto la ponemos en auto */
    background-color: var(--off-white);
}

.main-exchange-container{
    width: 100%;
    height: auto;
    padding-top: 80px;
    padding-bottom: 30px;
    text-align: center;
}

.main-exchange-container--title{
    width: 90%;
    min-width: 288px; /* que no se haga más chico q eso el contenedor del texto */
    max-width: 900px;
    margin: 0 auto; /* como no está ocupando el 100% se va a posicionar en el centro siempre */
}

/* imagen de background */
.main-exchange-container .backgroundImg{
    width: 200px;
    height: 200px;
    margin: 0 auto; /* como el div no va a ocupar el 100% tenemos hacer q se posicione en el centro a medida que lo crezcamos  */
    margin-bottom: 50px;
    background-image: url('./assets/imagenes/Bitcoin.svg');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat; /* en caso de q la imagen fuera más chica que el contenedor lo q va a hacer el background-image es replicar esta imagen para intentar cubrir el contendor y nosotros no queremos q se repita en caso de q la imagen fuera más chica. Entonces el no-repeat va a hacer q la imagen se intente estirar sin q se rompa, para q tengamos visibilidad de todo */
}

.main-exchange-container h2{
    margin-bottom: 30px; para separa el h2 de la etiqueta <p>
    font-size: 2.4rem;
    font-weight: bold;
    line-height: 2.6rem;
    color: var(--black);

}

.main-exchange-container p{
    margin-bottom: 30px;/*  para separar el parrafo del fin de lo q sería nuestro contenedor */
    font-size: 1.4rem;
    font-weight: 500;
    line-height: 1.6rem;
    color: #757575; /* como usamos estte color 1 sola vez, no es necesario guardarlo en variables */
}